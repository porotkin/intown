{"version":3,"sources":["constants.js","services/apiConnector.js","views/SubscribeButton.js","views/Friends.js","views/GeoButton.js","panels/Marker.js","views/Gmap.js","views/Main.js","index.js"],"names":["Constants","SERVER_API_ADDRESS","VK_APP_ID","VK_API_VERSION","ApiConnector","getSubscribers","user_id","a","fetch","mode","method","headers","addSubscriber","friend_id","body","JSON","stringify","id","subscriber","removeSubscriber","getUserLocation","addUserLocation","lat","long","date","Date","toLocaleDateString","SubscribeButton","props","subscribeToggle","state","subscribed","setState","on","text","then","this","onClick","React","Component","Friends","getFriends","access_token","bridge","send","request_id","params","fields","order","v","friends","subscribers","user_data","response","json","api","data","subs","items","reject","console","log","popout","map","friend","key","before","size","src","photo_50","after","includes","description","first_name","last_name","style","marginTop","GeoButton","textAlign","divStyle","position","top","left","width","height","backgroundColor","border","borderRadius","userSelect","transform","nameStyle","fontSize","dateStyle","Marker","name","Gmap","getGeo","sendGeoToServer","geoLocation","lng","getGeoDataFromServer","userInfo","user_ids","toString","forEach","user","location","userLocation","push","marginLeft","marginRight","bootstrapURLKeys","center","zoom","toISOString","split","defaultProps","Main","activeStory","onStoryChange","bind","e","currentTarget","dataset","story","tabbar","selected","data-story","fill","activePanel","separator","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c19e1813.chunk.js","sourcesContent":["export default class Constants {\r\n    static SERVER_API_ADDRESS = \"https://0bbd5ad15b54.ngrok.io/\";\r\n    static VK_APP_ID = 7550756;\r\n    static VK_API_VERSION = \"5.122\";\r\n}\r\n","import Constants from \"../constants\";\r\n\r\nexport default class ApiConnector {\r\n    static getSubscribers = async (user_id) => {\r\n        return await fetch(Constants.SERVER_API_ADDRESS + \"user/\" + user_id, {\r\n            mode: \"cors\",\r\n            method: \"GET\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n    }\r\n\r\n    static addSubscriber = async (user_id, friend_id) => {\r\n        return await fetch(Constants.SERVER_API_ADDRESS + \"user/add\", {\r\n            mode: \"cors\",\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                id: user_id,\r\n                subscriber: friend_id,\r\n            })\r\n        });\r\n    }\r\n\r\n    static removeSubscriber = async (user_id, friend_id) => {\r\n        return await fetch(Constants.SERVER_API_ADDRESS + \"user/remove\", {\r\n            mode: \"cors\",\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                id: user_id,\r\n                subscriber: friend_id,\r\n            })\r\n        });\r\n    }\r\n\r\n    static getUserLocation = async (user_id) => {\r\n        return await fetch(Constants.SERVER_API_ADDRESS + \"location/\" + user_id, {\r\n            mode: \"cors\",\r\n            method: \"GET\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n    }\r\n\r\n    static addUserLocation = async (id, lat, long) => {\r\n        return await fetch(Constants.SERVER_API_ADDRESS + \"location/add\", {\r\n            mode: \"cors\",\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                id: id,\r\n                date: new Date().toLocaleDateString(\"en-US\"),\r\n                lat: lat,\r\n                long: long,\r\n            }),\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport {Div, Button} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport ApiConnector from \"../services/apiConnector\";\r\n\r\nclass SubscribeButton extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = this.props.subscribed\r\n            ? {on: 'secondary', text: \"Отписаться\", subscribed: true}\r\n            : {on: 'primary', text: \"Подписаться\", subscribed: false};\r\n    }\r\n\r\n    subscribeToggle = () => {\r\n        if (!this.state.subscribed) {\r\n            this.setState({on: 'secondary', text: 'Отписаться', subscribed: true})\r\n            ApiConnector.addSubscriber(this.props.user_id, this.props.friend_id).then();\r\n        } else {\r\n            this.setState({on: 'primary', text: 'Подписаться', subscribed: false})\r\n            ApiConnector.removeSubscriber(this.props.user_id, this.props.friend_id).then();\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n                <Div >\r\n                    <Button mode={this.state.on} onClick={this.subscribeToggle}>{this.state.text}</Button>\r\n                </Div>\r\n        )\r\n    }\r\n}\r\nexport default SubscribeButton","import React from 'react';\r\nimport {Group, Header, Avatar, Spinner} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport SubscribeButton from \"./SubscribeButton\";\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport SimpleCell from \"@vkontakte/vkui/dist/components/SimpleCell/SimpleCell\";\r\nimport ApiConnector from \"../services/apiConnector\";\r\nimport Constants from \"../constants\";\r\n\r\nclass Friends extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n          friends: null,\r\n          user_id: null,\r\n          subscribers: null,\r\n        };\r\n        bridge.send(\"VKWebAppGetUserInfo\", {}).then((user_data) => {\r\n            ApiConnector.getSubscribers(user_data.id).then((response) => {\r\n                response.json().then((api) => {\r\n                    bridge.send(\"VKWebAppGetAuthToken\", {\"app_id\": Constants.VK_APP_ID, \"scope\": \"friends\"})\r\n                        .then(data => {\r\n                            this.getFriends(data.access_token).then(data => {\r\n                                this.setState({\r\n                                    user_id: user_data.id,\r\n                                    subscribers: api.subs,\r\n                                    friends: data.response.items\r\n                                });\r\n                            });\r\n                        });\r\n                });\r\n            }, (reject) => {\r\n                console.log(reject)\r\n            });\r\n        })\r\n    }\r\n\r\n    getFriends = async (access_token) => {\r\n        return await bridge\r\n            .send('VKWebAppCallAPIMethod',\r\n                {method: \"friends.get\", request_id: \"32test\",\r\n                    params: {\r\n                        fields: \"id, photo_50\",\r\n                        order: \"name\",\r\n                        access_token: access_token,\r\n                        v: Constants.VK_API_VERSION,\r\n                    }\r\n                });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Group>\r\n                <Header mode=\"secondary\" popout={this.state.popout}>Список друзей</Header>\r\n                {this.state.friends ? this.state.friends.map((friend) => {\r\n                    return <SimpleCell\r\n                        key={friend.id}\r\n                        before={<Avatar size={48} src={friend.photo_50}/>}\r\n                        after={<SubscribeButton\r\n                            user_id={this.state.user_id}\r\n                            friend_id={friend.id}\r\n                            subscribed={this.state.subscribers ? this.state.subscribers.includes(friend.id) : false}\r\n                        />}\r\n                        description={friend.id}\r\n                    >{friend.first_name + ' ' + friend.last_name}</SimpleCell>\r\n                }) : <Spinner size=\"regular\" style={{ marginTop: 20 }}/> }\r\n            </Group>\r\n        )\r\n    }\r\n}\r\nexport default Friends","import React from 'react';\r\nimport {Div, Button} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n\r\nclass GeoButton extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n                <Div style={{textAlign: 'center', marginTop: '3%'}}>\r\n                    <Button mode=\"commerce\" size='xl' onClick={this.props.onClick}>Поделиться геопозицией</Button>\r\n                </Div>\r\n        )\r\n    }\r\n}\r\nexport default GeoButton","import React from 'react';\r\n\r\nconst divStyle = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    width: '15px',\r\n    height: '15px',\r\n    backgroundColor: '#0cb',\r\n    border: '2px solid #fff',\r\n    borderRadius: '40%',\r\n    userSelect: 'none',\r\n    transform: 'translate(-50%, -50%)'\r\n}\r\nconst nameStyle = {\r\n    width: '500px',\r\n    transform: 'translate(-7%, 0)',\r\n    fontSize: '12pt'\r\n}\r\nconst dateStyle = {\r\n    width: '500px',\r\n    transform: 'translate(-7%, -15px)',\r\n    fontSize: '9pt'\r\n}\r\n\r\nclass Marker extends React.Component {\r\n    render() {\r\n        return  <div style={divStyle}>\r\n                    <p style={nameStyle}>{this.props.name}</p>\r\n                    <p style={dateStyle}>{this.props.date}</p>\r\n                </div>\r\n    }\r\n}\r\nexport default Marker;","import {Group, ScreenSpinner} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport React from 'react';\r\nimport GeoButton from \"./GeoButton\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport GoogleMapReact from 'google-map-react';\r\nimport Marker from '../panels/Marker'\r\nimport ApiConnector from \"../services/apiConnector\";\r\nimport Constants from \"../constants\";\r\n\r\nclass Gmap extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            geoLocation: null,\r\n            subscribers: null,\r\n            user_id: null,\r\n        }\r\n        this.getGeoDataFromServer();\r\n    }\r\n\r\n    static defaultProps = {\r\n        center:{\r\n            lat:30,\r\n            lng:30\r\n        },\r\n        zoom: 7\r\n    };\r\n\r\n    getGeo = async () =>  {\r\n        return await bridge.send('VKWebAppGetGeodata');\r\n    }\r\n\r\n    sendGeoToServer = async () => {\r\n        await this.getGeo().then(data => {\r\n            ApiConnector.addUserLocation(this.state.user_id, data.lat, data.long);\r\n            this.setState({\r\n                geoLocation: {\r\n                    lat: data.lat,\r\n                    lng: data.long,\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getGeoDataFromServer = async () => {\r\n        let subscribers = []\r\n        await bridge.send('VKWebAppGetUserInfo')\r\n            .then(userInfo => {\r\n                this.setState({ user_id: userInfo.id });\r\n                ApiConnector.getSubscribers(userInfo.id).then((response) => {\r\n                    response.json().then((data) => {\r\n                        bridge.send('VKWebAppGetAuthToken', {\"app_id\": Constants.VK_APP_ID, \"scope\": \"users\"}).then(response => {\r\n                            bridge.send('VKWebAppCallAPIMethod', {\r\n                                method: \"users.get\",\r\n                                request_id: \"64test\",\r\n                                params: {\r\n                                    user_ids: data.subs.toString(),\r\n                                    fields: \"first_name, last_name\",\r\n                                    v: Constants.VK_API_VERSION,\r\n                                    access_token: response.access_token,\r\n                                }\r\n                            }).then((data) => {\r\n                                data.response.forEach(user => {\r\n                                    ApiConnector.getUserLocation(user.id).then((response) => {\r\n                                        response.json().then((location) => {\r\n                                            if (location.date !== \"\") {\r\n                                                const userLocation = {\r\n                                                    id: location.id,\r\n                                                    name: user.first_name + ' ' + user.last_name,\r\n                                                    date: location.date,\r\n                                                    lat: location.lat,\r\n                                                    lng: location.lng,\r\n                                                }\r\n                                                subscribers.push(userLocation)\r\n                                            }\r\n                                        });\r\n                                    });\r\n                                });\r\n                                this.setState({\r\n                                    subscribers: subscribers\r\n                                });\r\n                            })\r\n                        })\r\n                    })\r\n                });\r\n            });\r\n    }\r\n\r\n    render () {\r\n        return (this.state.subscribers)\r\n        ? (\r\n            <Group style={{\r\n                height: '65vh', width: '95%',\r\n                marginLeft: \"auto\",\r\n                marginRight: \"auto\"\r\n            }}>\r\n            <GoogleMapReact\r\n                bootstrapURLKeys={{ key: 'AIzaSyCA-CWX9xnTnxGmzIxkH_WIsGUrdeRI444' }}\r\n                center={this.state.geoLocation ? this.state.geoLocation : this.props.center}\r\n                zoom={this.props.zoom}>\r\n                {this.state.geoLocation ? <Marker lat={this.state.geoLocation.lat} lng={this.state.geoLocation.lng} name={'Вы'} date={new Date().toISOString().split(\"T\")[0]}/>:''}\r\n                {this.state.subscribers.map((friend) => {\r\n                    return <Marker key={friend.id} lat={friend.lat} lng={friend.lng} name={friend.name} date={friend.date}/>})}\r\n            </GoogleMapReact>\r\n            <GeoButton onClick={this.sendGeoToServer}/>\r\n            </Group>\r\n        )\r\n        : (<ScreenSpinner size=\"large\" />)\r\n    }\r\n}\r\nexport default Gmap","import React from 'react';\r\nimport {Epic, Panel, PanelHeader, Tabbar, TabbarItem, View} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport Icon28PlayRectangleStackOutline from '@vkontakte/icons/dist/28/play_rectangle_stack_outline';\r\nimport Icon28LocationOutline from '@vkontakte/icons/dist/28/location_outline';\r\nimport Friends from \"./Friends\";\r\nimport Gmap from \"./Gmap\";\r\n\r\nclass Main extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeStory: 'Subs',\r\n        };\r\n\r\n        this.onStoryChange = this.onStoryChange.bind(this);\r\n    }\r\n\r\n    onStoryChange (e) {\r\n        this.setState({ activeStory: e.currentTarget.dataset.story })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Epic activeStory={this.state.activeStory} tabbar={\r\n                <Tabbar>\r\n                    <TabbarItem\r\n                        onClick={this.onStoryChange}\r\n                        selected={this.state.activeStory === 'Subs'}\r\n                        data-story=\"Subs\"\r\n                        text=\"Подписки\"\r\n                    ><Icon28PlayRectangleStackOutline fill='#FF7F50' /></TabbarItem>\r\n                    <TabbarItem\r\n                        onClick={this.onStoryChange}\r\n                        selected={this.state.activeStory === 'Geo'}\r\n                        data-story=\"Geo\"\r\n                        text=\"Геолокация\"\r\n                    ><Icon28LocationOutline fill='#228B22'/></TabbarItem>\r\n                </Tabbar>\r\n            }>\r\n                <View id=\"Subs\" activePanel=\"Subs\">\r\n                    <Panel id=\"Subs\">\r\n                        <PanelHeader separator={false}>Подписки</PanelHeader>\r\n                            <Friends/>\r\n                    </Panel>\r\n                </View>\r\n                <View id=\"Geo\" activePanel=\"Geo\" >\r\n                    <Panel id=\"Geo\">\r\n                        <PanelHeader separator={false}>Геолокация</PanelHeader>\r\n                            <Gmap />\r\n                    </Panel>\r\n                </View>\r\n            </Epic>\r\n        )\r\n    }\r\n}\r\nexport default Main","import \"core-js/features/map\";\r\nimport \"core-js/features/set\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport Main from \"./views/Main\"\r\n\r\n// Init VK  Mini App\r\nbridge.send(\"VKWebAppInit\").then();\r\n\r\nReactDOM.render(<Main />, document.getElementById(\"root\"));\r\nif (process.env.NODE_ENV === \"development\") {\r\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\r\n}\r\n"],"sourceRoot":""}